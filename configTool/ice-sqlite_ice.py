# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `ice-sqlite.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module DemoArea
_M_DemoArea = Ice.openModule('DemoArea')
__name__ = 'DemoArea'

if '_t_ByteSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_ByteSeq = IcePy.defineSequence('::DemoArea::ByteSeq', (), IcePy._t_byte)

if '_t_LongSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_LongSeq = IcePy.defineSequence('::DemoArea::LongSeq', (), IcePy._t_long)

if '_t_StringSeq' not in _M_DemoArea.__dict__:
    _M_DemoArea._t_StringSeq = IcePy.defineSequence('::DemoArea::StringSeq', (), IcePy._t_string)

# End of module DemoArea

# Start of module YCArea
_M_YCArea = Ice.openModule('YCArea')
__name__ = 'YCArea'

if 'DxPropertyYC' not in _M_YCArea.__dict__:
    _M_YCArea.DxPropertyYC = Ice.createTempClass()
    class DxPropertyYC(object):
        def __init__(self, ID=0, name='', describe='', unit='', kval=0.0, bval=0.0, address='', uplimt=0.0, downlimt=0.0):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.unit = unit
            self.kval = kval
            self.bval = bval
            self.address = address
            self.uplimt = uplimt
            self.downlimt = downlimt

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_YCArea.DxPropertyYC):
                return NotImplemented
            else:
                if self.ID != other.ID:
                    return False
                if self.name != other.name:
                    return False
                if self.describe != other.describe:
                    return False
                if self.unit != other.unit:
                    return False
                if self.kval != other.kval:
                    return False
                if self.bval != other.bval:
                    return False
                if self.address != other.address:
                    return False
                if self.uplimt != other.uplimt:
                    return False
                if self.downlimt != other.downlimt:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_YCArea._t_DxPropertyYC)

        __repr__ = __str__

    _M_YCArea._t_DxPropertyYC = IcePy.defineStruct('::YCArea::DxPropertyYC', DxPropertyYC, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('unit', (), IcePy._t_string),
        ('kval', (), IcePy._t_float),
        ('bval', (), IcePy._t_float),
        ('address', (), IcePy._t_string),
        ('uplimt', (), IcePy._t_float),
        ('downlimt', (), IcePy._t_float)
    ))

    _M_YCArea.DxPropertyYC = DxPropertyYC
    del DxPropertyYC

if 'DxDTYC' not in _M_YCArea.__dict__:
    _M_YCArea.DxDTYC = Ice.createTempClass()
    class DxDTYC(object):
        def __init__(self, status=0, value=0.0, timetag=0):
            self.status = status
            self.value = value
            self.timetag = timetag

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_YCArea.DxDTYC):
                return NotImplemented
            else:
                if self.status != other.status:
                    return False
                if self.value != other.value:
                    return False
                if self.timetag != other.timetag:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_YCArea._t_DxDTYC)

        __repr__ = __str__

    _M_YCArea._t_DxDTYC = IcePy.defineStruct('::YCArea::DxDTYC', DxDTYC, (), (
        ('status', (), IcePy._t_short),
        ('value', (), IcePy._t_float),
        ('timetag', (), IcePy._t_int)
    ))

    _M_YCArea.DxDTYC = DxDTYC
    del DxDTYC

if '_t_DxPropertyYCSeq' not in _M_YCArea.__dict__:
    _M_YCArea._t_DxPropertyYCSeq = IcePy.defineSequence('::YCArea::DxPropertyYCSeq', (), _M_YCArea._t_DxPropertyYC)

if '_t_DxDTYCSeq' not in _M_YCArea.__dict__:
    _M_YCArea._t_DxDTYCSeq = IcePy.defineSequence('::YCArea::DxDTYCSeq', (), _M_YCArea._t_DxDTYC)

# End of module YCArea

# Start of module YXArea
_M_YXArea = Ice.openModule('YXArea')
__name__ = 'YXArea'

if 'DxPropertyYX' not in _M_YXArea.__dict__:
    _M_YXArea.DxPropertyYX = Ice.createTempClass()
    class DxPropertyYX(object):
        def __init__(self, ID=0, name='', describe='', ASDU=0, wordPos=0, bitPos=0, bitLength=0, LinkPoint1=0, LinkPoint2=0, OneToZero='', ZeroToOne='', address=''):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.ASDU = ASDU
            self.wordPos = wordPos
            self.bitPos = bitPos
            self.bitLength = bitLength
            self.LinkPoint1 = LinkPoint1
            self.LinkPoint2 = LinkPoint2
            self.OneToZero = OneToZero
            self.ZeroToOne = ZeroToOne
            self.address = address

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ID)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.describe)
            _h = 5 * _h + Ice.getHash(self.ASDU)
            _h = 5 * _h + Ice.getHash(self.wordPos)
            _h = 5 * _h + Ice.getHash(self.bitPos)
            _h = 5 * _h + Ice.getHash(self.bitLength)
            _h = 5 * _h + Ice.getHash(self.LinkPoint1)
            _h = 5 * _h + Ice.getHash(self.LinkPoint2)
            _h = 5 * _h + Ice.getHash(self.OneToZero)
            _h = 5 * _h + Ice.getHash(self.ZeroToOne)
            _h = 5 * _h + Ice.getHash(self.address)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_YXArea.DxPropertyYX):
                return NotImplemented
            else:
                if self.ID is None or other.ID is None:
                    if self.ID != other.ID:
                        return (-1 if self.ID is None else 1)
                else:
                    if self.ID < other.ID:
                        return -1
                    elif self.ID > other.ID:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.describe is None or other.describe is None:
                    if self.describe != other.describe:
                        return (-1 if self.describe is None else 1)
                else:
                    if self.describe < other.describe:
                        return -1
                    elif self.describe > other.describe:
                        return 1
                if self.ASDU is None or other.ASDU is None:
                    if self.ASDU != other.ASDU:
                        return (-1 if self.ASDU is None else 1)
                else:
                    if self.ASDU < other.ASDU:
                        return -1
                    elif self.ASDU > other.ASDU:
                        return 1
                if self.wordPos is None or other.wordPos is None:
                    if self.wordPos != other.wordPos:
                        return (-1 if self.wordPos is None else 1)
                else:
                    if self.wordPos < other.wordPos:
                        return -1
                    elif self.wordPos > other.wordPos:
                        return 1
                if self.bitPos is None or other.bitPos is None:
                    if self.bitPos != other.bitPos:
                        return (-1 if self.bitPos is None else 1)
                else:
                    if self.bitPos < other.bitPos:
                        return -1
                    elif self.bitPos > other.bitPos:
                        return 1
                if self.bitLength is None or other.bitLength is None:
                    if self.bitLength != other.bitLength:
                        return (-1 if self.bitLength is None else 1)
                else:
                    if self.bitLength < other.bitLength:
                        return -1
                    elif self.bitLength > other.bitLength:
                        return 1
                if self.LinkPoint1 is None or other.LinkPoint1 is None:
                    if self.LinkPoint1 != other.LinkPoint1:
                        return (-1 if self.LinkPoint1 is None else 1)
                else:
                    if self.LinkPoint1 < other.LinkPoint1:
                        return -1
                    elif self.LinkPoint1 > other.LinkPoint1:
                        return 1
                if self.LinkPoint2 is None or other.LinkPoint2 is None:
                    if self.LinkPoint2 != other.LinkPoint2:
                        return (-1 if self.LinkPoint2 is None else 1)
                else:
                    if self.LinkPoint2 < other.LinkPoint2:
                        return -1
                    elif self.LinkPoint2 > other.LinkPoint2:
                        return 1
                if self.OneToZero is None or other.OneToZero is None:
                    if self.OneToZero != other.OneToZero:
                        return (-1 if self.OneToZero is None else 1)
                else:
                    if self.OneToZero < other.OneToZero:
                        return -1
                    elif self.OneToZero > other.OneToZero:
                        return 1
                if self.ZeroToOne is None or other.ZeroToOne is None:
                    if self.ZeroToOne != other.ZeroToOne:
                        return (-1 if self.ZeroToOne is None else 1)
                else:
                    if self.ZeroToOne < other.ZeroToOne:
                        return -1
                    elif self.ZeroToOne > other.ZeroToOne:
                        return 1
                if self.address is None or other.address is None:
                    if self.address != other.address:
                        return (-1 if self.address is None else 1)
                else:
                    if self.address < other.address:
                        return -1
                    elif self.address > other.address:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_YXArea._t_DxPropertyYX)

        __repr__ = __str__

    _M_YXArea._t_DxPropertyYX = IcePy.defineStruct('::YXArea::DxPropertyYX', DxPropertyYX, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('ASDU', (), IcePy._t_int),
        ('wordPos', (), IcePy._t_int),
        ('bitPos', (), IcePy._t_int),
        ('bitLength', (), IcePy._t_int),
        ('LinkPoint1', (), IcePy._t_int),
        ('LinkPoint2', (), IcePy._t_int),
        ('OneToZero', (), IcePy._t_string),
        ('ZeroToOne', (), IcePy._t_string),
        ('address', (), IcePy._t_string)
    ))

    _M_YXArea.DxPropertyYX = DxPropertyYX
    del DxPropertyYX

if 'DxDTYX' not in _M_YXArea.__dict__:
    _M_YXArea.DxDTYX = Ice.createTempClass()
    class DxDTYX(object):
        def __init__(self, status=0, value=0, timetag=0):
            self.status = status
            self.value = value
            self.timetag = timetag

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.value)
            _h = 5 * _h + Ice.getHash(self.timetag)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_YXArea.DxDTYX):
                return NotImplemented
            else:
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                if self.timetag is None or other.timetag is None:
                    if self.timetag != other.timetag:
                        return (-1 if self.timetag is None else 1)
                else:
                    if self.timetag < other.timetag:
                        return -1
                    elif self.timetag > other.timetag:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_YXArea._t_DxDTYX)

        __repr__ = __str__

    _M_YXArea._t_DxDTYX = IcePy.defineStruct('::YXArea::DxDTYX', DxDTYX, (), (
        ('status', (), IcePy._t_short),
        ('value', (), IcePy._t_short),
        ('timetag', (), IcePy._t_int)
    ))

    _M_YXArea.DxDTYX = DxDTYX
    del DxDTYX

if '_t_DxPropertyYXSeq' not in _M_YXArea.__dict__:
    _M_YXArea._t_DxPropertyYXSeq = IcePy.defineSequence('::YXArea::DxPropertyYXSeq', (), _M_YXArea._t_DxPropertyYX)

if '_t_DxDTYXSeq' not in _M_YXArea.__dict__:
    _M_YXArea._t_DxDTYXSeq = IcePy.defineSequence('::YXArea::DxDTYXSeq', (), _M_YXArea._t_DxDTYX)

# End of module YXArea

# Start of module StationArea
_M_StationArea = Ice.openModule('StationArea')
__name__ = 'StationArea'

if 'DxPropertyStation' not in _M_StationArea.__dict__:
    _M_StationArea.DxPropertyStation = Ice.createTempClass()
    class DxPropertyStation(object):
        def __init__(self, ID=0, name='', describe='', ruleID=0, address='', PORT=0, role=0):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.ruleID = ruleID
            self.address = address
            self.PORT = PORT
            self.role = role

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ID)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.describe)
            _h = 5 * _h + Ice.getHash(self.ruleID)
            _h = 5 * _h + Ice.getHash(self.address)
            _h = 5 * _h + Ice.getHash(self.PORT)
            _h = 5 * _h + Ice.getHash(self.role)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_StationArea.DxPropertyStation):
                return NotImplemented
            else:
                if self.ID is None or other.ID is None:
                    if self.ID != other.ID:
                        return (-1 if self.ID is None else 1)
                else:
                    if self.ID < other.ID:
                        return -1
                    elif self.ID > other.ID:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.describe is None or other.describe is None:
                    if self.describe != other.describe:
                        return (-1 if self.describe is None else 1)
                else:
                    if self.describe < other.describe:
                        return -1
                    elif self.describe > other.describe:
                        return 1
                if self.ruleID is None or other.ruleID is None:
                    if self.ruleID != other.ruleID:
                        return (-1 if self.ruleID is None else 1)
                else:
                    if self.ruleID < other.ruleID:
                        return -1
                    elif self.ruleID > other.ruleID:
                        return 1
                if self.address is None or other.address is None:
                    if self.address != other.address:
                        return (-1 if self.address is None else 1)
                else:
                    if self.address < other.address:
                        return -1
                    elif self.address > other.address:
                        return 1
                if self.PORT is None or other.PORT is None:
                    if self.PORT != other.PORT:
                        return (-1 if self.PORT is None else 1)
                else:
                    if self.PORT < other.PORT:
                        return -1
                    elif self.PORT > other.PORT:
                        return 1
                if self.role is None or other.role is None:
                    if self.role != other.role:
                        return (-1 if self.role is None else 1)
                else:
                    if self.role < other.role:
                        return -1
                    elif self.role > other.role:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_StationArea._t_DxPropertyStation)

        __repr__ = __str__

    _M_StationArea._t_DxPropertyStation = IcePy.defineStruct('::StationArea::DxPropertyStation', DxPropertyStation, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('ruleID', (), IcePy._t_int),
        ('address', (), IcePy._t_string),
        ('PORT', (), IcePy._t_int),
        ('role', (), IcePy._t_int)
    ))

    _M_StationArea.DxPropertyStation = DxPropertyStation
    del DxPropertyStation

if '_t_DxPropertyStationSeq' not in _M_StationArea.__dict__:
    _M_StationArea._t_DxPropertyStationSeq = IcePy.defineSequence('::StationArea::DxPropertyStationSeq', (), _M_StationArea._t_DxPropertyStation)

# End of module StationArea

# Start of module SOEArea
_M_SOEArea = Ice.openModule('SOEArea')
__name__ = 'SOEArea'

if 'DxPropertySOE' not in _M_SOEArea.__dict__:
    _M_SOEArea.DxPropertySOE = Ice.createTempClass()
    class DxPropertySOE(object):
        def __init__(self, ID=0, name='', describe='', level=0, address=''):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.level = level
            self.address = address

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ID)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.describe)
            _h = 5 * _h + Ice.getHash(self.level)
            _h = 5 * _h + Ice.getHash(self.address)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SOEArea.DxPropertySOE):
                return NotImplemented
            else:
                if self.ID is None or other.ID is None:
                    if self.ID != other.ID:
                        return (-1 if self.ID is None else 1)
                else:
                    if self.ID < other.ID:
                        return -1
                    elif self.ID > other.ID:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.describe is None or other.describe is None:
                    if self.describe != other.describe:
                        return (-1 if self.describe is None else 1)
                else:
                    if self.describe < other.describe:
                        return -1
                    elif self.describe > other.describe:
                        return 1
                if self.level is None or other.level is None:
                    if self.level != other.level:
                        return (-1 if self.level is None else 1)
                else:
                    if self.level < other.level:
                        return -1
                    elif self.level > other.level:
                        return 1
                if self.address is None or other.address is None:
                    if self.address != other.address:
                        return (-1 if self.address is None else 1)
                else:
                    if self.address < other.address:
                        return -1
                    elif self.address > other.address:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SOEArea._t_DxPropertySOE)

        __repr__ = __str__

    _M_SOEArea._t_DxPropertySOE = IcePy.defineStruct('::SOEArea::DxPropertySOE', DxPropertySOE, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('level', (), IcePy._t_int),
        ('address', (), IcePy._t_string)
    ))

    _M_SOEArea.DxPropertySOE = DxPropertySOE
    del DxPropertySOE

if '_t_DxPropertySOESeq' not in _M_SOEArea.__dict__:
    _M_SOEArea._t_DxPropertySOESeq = IcePy.defineSequence('::SOEArea::DxPropertySOESeq', (), _M_SOEArea._t_DxPropertySOE)

# End of module SOEArea

# Start of module YKArea
_M_YKArea = Ice.openModule('YKArea')
__name__ = 'YKArea'

if 'DxPropertyYK' not in _M_YKArea.__dict__:
    _M_YKArea.DxPropertyYK = Ice.createTempClass()
    class DxPropertyYK(object):
        def __init__(self, ID=0, name='', describe='', ASDU=0, wordPos=0, bitPos=0, bitLength=0, EnablePoint=0, EnableValue=0, address=''):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.ASDU = ASDU
            self.wordPos = wordPos
            self.bitPos = bitPos
            self.bitLength = bitLength
            self.EnablePoint = EnablePoint
            self.EnableValue = EnableValue
            self.address = address

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ID)
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.describe)
            _h = 5 * _h + Ice.getHash(self.ASDU)
            _h = 5 * _h + Ice.getHash(self.wordPos)
            _h = 5 * _h + Ice.getHash(self.bitPos)
            _h = 5 * _h + Ice.getHash(self.bitLength)
            _h = 5 * _h + Ice.getHash(self.EnablePoint)
            _h = 5 * _h + Ice.getHash(self.EnableValue)
            _h = 5 * _h + Ice.getHash(self.address)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_YKArea.DxPropertyYK):
                return NotImplemented
            else:
                if self.ID is None or other.ID is None:
                    if self.ID != other.ID:
                        return (-1 if self.ID is None else 1)
                else:
                    if self.ID < other.ID:
                        return -1
                    elif self.ID > other.ID:
                        return 1
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.describe is None or other.describe is None:
                    if self.describe != other.describe:
                        return (-1 if self.describe is None else 1)
                else:
                    if self.describe < other.describe:
                        return -1
                    elif self.describe > other.describe:
                        return 1
                if self.ASDU is None or other.ASDU is None:
                    if self.ASDU != other.ASDU:
                        return (-1 if self.ASDU is None else 1)
                else:
                    if self.ASDU < other.ASDU:
                        return -1
                    elif self.ASDU > other.ASDU:
                        return 1
                if self.wordPos is None or other.wordPos is None:
                    if self.wordPos != other.wordPos:
                        return (-1 if self.wordPos is None else 1)
                else:
                    if self.wordPos < other.wordPos:
                        return -1
                    elif self.wordPos > other.wordPos:
                        return 1
                if self.bitPos is None or other.bitPos is None:
                    if self.bitPos != other.bitPos:
                        return (-1 if self.bitPos is None else 1)
                else:
                    if self.bitPos < other.bitPos:
                        return -1
                    elif self.bitPos > other.bitPos:
                        return 1
                if self.bitLength is None or other.bitLength is None:
                    if self.bitLength != other.bitLength:
                        return (-1 if self.bitLength is None else 1)
                else:
                    if self.bitLength < other.bitLength:
                        return -1
                    elif self.bitLength > other.bitLength:
                        return 1
                if self.EnablePoint is None or other.EnablePoint is None:
                    if self.EnablePoint != other.EnablePoint:
                        return (-1 if self.EnablePoint is None else 1)
                else:
                    if self.EnablePoint < other.EnablePoint:
                        return -1
                    elif self.EnablePoint > other.EnablePoint:
                        return 1
                if self.EnableValue is None or other.EnableValue is None:
                    if self.EnableValue != other.EnableValue:
                        return (-1 if self.EnableValue is None else 1)
                else:
                    if self.EnableValue < other.EnableValue:
                        return -1
                    elif self.EnableValue > other.EnableValue:
                        return 1
                if self.address is None or other.address is None:
                    if self.address != other.address:
                        return (-1 if self.address is None else 1)
                else:
                    if self.address < other.address:
                        return -1
                    elif self.address > other.address:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_YKArea._t_DxPropertyYK)

        __repr__ = __str__

    _M_YKArea._t_DxPropertyYK = IcePy.defineStruct('::YKArea::DxPropertyYK', DxPropertyYK, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('ASDU', (), IcePy._t_int),
        ('wordPos', (), IcePy._t_int),
        ('bitPos', (), IcePy._t_int),
        ('bitLength', (), IcePy._t_int),
        ('EnablePoint', (), IcePy._t_int),
        ('EnableValue', (), IcePy._t_int),
        ('address', (), IcePy._t_string)
    ))

    _M_YKArea.DxPropertyYK = DxPropertyYK
    del DxPropertyYK

if '_t_DxPropertyYKSeq' not in _M_YKArea.__dict__:
    _M_YKArea._t_DxPropertyYKSeq = IcePy.defineSequence('::YKArea::DxPropertyYKSeq', (), _M_YKArea._t_DxPropertyYK)

# End of module YKArea

# Start of module YTArea
_M_YTArea = Ice.openModule('YTArea')
__name__ = 'YTArea'

if 'DxPropertyYT' not in _M_YTArea.__dict__:
    _M_YTArea.DxPropertyYT = Ice.createTempClass()
    class DxPropertyYT(object):
        def __init__(self, ID=0, name='', describe='', unit='', kval=0.0, bval=0.0, address='', uplimt=0.0, downlimt=0.0):
            self.ID = ID
            self.name = name
            self.describe = describe
            self.unit = unit
            self.kval = kval
            self.bval = bval
            self.address = address
            self.uplimt = uplimt
            self.downlimt = downlimt

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_YTArea.DxPropertyYT):
                return NotImplemented
            else:
                if self.ID != other.ID:
                    return False
                if self.name != other.name:
                    return False
                if self.describe != other.describe:
                    return False
                if self.unit != other.unit:
                    return False
                if self.kval != other.kval:
                    return False
                if self.bval != other.bval:
                    return False
                if self.address != other.address:
                    return False
                if self.uplimt != other.uplimt:
                    return False
                if self.downlimt != other.downlimt:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_YTArea._t_DxPropertyYT)

        __repr__ = __str__

    _M_YTArea._t_DxPropertyYT = IcePy.defineStruct('::YTArea::DxPropertyYT', DxPropertyYT, (), (
        ('ID', (), IcePy._t_int),
        ('name', (), IcePy._t_string),
        ('describe', (), IcePy._t_string),
        ('unit', (), IcePy._t_string),
        ('kval', (), IcePy._t_float),
        ('bval', (), IcePy._t_float),
        ('address', (), IcePy._t_string),
        ('uplimt', (), IcePy._t_float),
        ('downlimt', (), IcePy._t_float)
    ))

    _M_YTArea.DxPropertyYT = DxPropertyYT
    del DxPropertyYT

if '_t_DxPropertyYTSeq' not in _M_YTArea.__dict__:
    _M_YTArea._t_DxPropertyYTSeq = IcePy.defineSequence('::YTArea::DxPropertyYTSeq', (), _M_YTArea._t_DxPropertyYT)

# End of module YTArea

# Start of module CommandArea
_M_CommandArea = Ice.openModule('CommandArea')
__name__ = 'CommandArea'

_M_CommandArea._t_DataCommand = IcePy.defineValue('::CommandArea::DataCommand', Ice.Value, -1, (), False, True, None, ())

if 'DataCommandPrx' not in _M_CommandArea.__dict__:
    _M_CommandArea.DataCommandPrx = Ice.createTempClass()
    class DataCommandPrx(Ice.ObjectPrx):

        def RPCDelYCProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYCPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYCProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYCProperty.end(self, _r)

        def RPCGetYCProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.invoke(self, ((station, ), context))

        def RPCGetYCPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYCProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYCProperty.end(self, _r)

        def RPCSetYCProperty(self, station, YCProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.invoke(self, ((station, YCProperty), context))

        def RPCSetYCPropertyAsync(self, station, YCProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.invokeAsync(self, ((station, YCProperty), context))

        def begin_RPCSetYCProperty(self, station, YCProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.begin(self, ((station, YCProperty), _response, _ex, _sent, context))

        def end_RPCSetYCProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYCProperty.end(self, _r)

        def RPCGetRealtimeYCData(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.invoke(self, ((station, pIDs), context))

        def RPCGetRealtimeYCDataAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCGetRealtimeYCData(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCData.end(self, _r)

        def RPCGetRealtimeYCDataForHTML(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.invoke(self, ((pIDs, ), context))

        def RPCGetRealtimeYCDataForHTMLAsync(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.invokeAsync(self, ((pIDs, ), context))

        def begin_RPCGetRealtimeYCDataForHTML(self, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.begin(self, ((pIDs, ), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYCDataForHTML(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYCDataForHTML.end(self, _r)

        def RPCGetDayYCDatas(self, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.invoke(self, ((datetime, pIDs), context))

        def RPCGetDayYCDatasAsync(self, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.invokeAsync(self, ((datetime, pIDs), context))

        def begin_RPCGetDayYCDatas(self, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.begin(self, ((datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetDayYCDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYCDatas.end(self, _r)

        def RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.invoke(self, ((datetime0, datetime1, pIDs), context))

        def RPCGetPeriodYCDatasAsync(self, datetime0, datetime1, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.invokeAsync(self, ((datetime0, datetime1, pIDs), context))

        def begin_RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.begin(self, ((datetime0, datetime1, pIDs), _response, _ex, _sent, context))

        def end_RPCGetPeriodYCDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYCDatas.end(self, _r)

        def RPCGetTimePointYCData(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetTimePointYCDataAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetTimePointYCData(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetTimePointYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYCData.end(self, _r)

        def RPCSetRealtimeYCData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.invoke(self, ((station, pIDs, data), context))

        def RPCSetRealtimeYCDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSetRealtimeYCData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSetRealtimeYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYCData.end(self, _r)

        def RPCSaveYCData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.invoke(self, ((station, pIDs, data), context))

        def RPCSaveYCDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSaveYCData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSaveYCData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSaveYCData.end(self, _r)

        def RPCDelYXProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYXPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYXProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYXProperty.end(self, _r)

        def RPCGetYXProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.invoke(self, ((station, ), context))

        def RPCGetYXPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYXProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYXProperty.end(self, _r)

        def RPCSetYXProperty(self, station, YXProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.invoke(self, ((station, YXProperty), context))

        def RPCSetYXPropertyAsync(self, station, YXProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.invokeAsync(self, ((station, YXProperty), context))

        def begin_RPCSetYXProperty(self, station, YXProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.begin(self, ((station, YXProperty), _response, _ex, _sent, context))

        def end_RPCSetYXProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYXProperty.end(self, _r)

        def RPCGetRealtimeYXData(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.invoke(self, ((station, pIDs), context))

        def RPCGetRealtimeYXDataAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCGetRealtimeYXData(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXData.end(self, _r)

        def RPCGetRealtimeYXDataForHTML(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.invoke(self, ((pIDs, ), context))

        def RPCGetRealtimeYXDataForHTMLAsync(self, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.invokeAsync(self, ((pIDs, ), context))

        def begin_RPCGetRealtimeYXDataForHTML(self, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.begin(self, ((pIDs, ), _response, _ex, _sent, context))

        def end_RPCGetRealtimeYXDataForHTML(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetRealtimeYXDataForHTML.end(self, _r)

        def RPCGetDayYXData(self, station, datetime, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.invoke(self, ((station, datetime, pID), context))

        def RPCGetDayYXDataAsync(self, station, datetime, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.invokeAsync(self, ((station, datetime, pID), context))

        def begin_RPCGetDayYXData(self, station, datetime, pID, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.begin(self, ((station, datetime, pID), _response, _ex, _sent, context))

        def end_RPCGetDayYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXData.end(self, _r)

        def RPCGetDayYXDatas(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetDayYXDatasAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetDayYXDatas(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetDayYXDatas(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetDayYXDatas.end(self, _r)

        def RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.invoke(self, ((station, datetime0, datetime1, pID), context))

        def RPCGetPeriodYXDataAsync(self, station, datetime0, datetime1, pID, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.invokeAsync(self, ((station, datetime0, datetime1, pID), context))

        def begin_RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.begin(self, ((station, datetime0, datetime1, pID), _response, _ex, _sent, context))

        def end_RPCGetPeriodYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPeriodYXData.end(self, _r)

        def RPCGetTimePointYXData(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.invoke(self, ((station, datetime, pIDs), context))

        def RPCGetTimePointYXDataAsync(self, station, datetime, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.invokeAsync(self, ((station, datetime, pIDs), context))

        def begin_RPCGetTimePointYXData(self, station, datetime, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.begin(self, ((station, datetime, pIDs), _response, _ex, _sent, context))

        def end_RPCGetTimePointYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetTimePointYXData.end(self, _r)

        def RPCSetRealtimeYXData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.invoke(self, ((station, pIDs, data), context))

        def RPCSetRealtimeYXDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSetRealtimeYXData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSetRealtimeYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetRealtimeYXData.end(self, _r)

        def RPCSaveYXData(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.invoke(self, ((station, pIDs, data), context))

        def RPCSaveYXDataAsync(self, station, pIDs, data, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.invokeAsync(self, ((station, pIDs, data), context))

        def begin_RPCSaveYXData(self, station, pIDs, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.begin(self, ((station, pIDs, data), _response, _ex, _sent, context))

        def end_RPCSaveYXData(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSaveYXData.end(self, _r)

        def RPCDelStationProperty(self, stations, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.invoke(self, ((stations, ), context))

        def RPCDelStationPropertyAsync(self, stations, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.invokeAsync(self, ((stations, ), context))

        def begin_RPCDelStationProperty(self, stations, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.begin(self, ((stations, ), _response, _ex, _sent, context))

        def end_RPCDelStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelStationProperty.end(self, _r)

        def RPCGetStationProperty(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.invoke(self, ((), context))

        def RPCGetStationPropertyAsync(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.invokeAsync(self, ((), context))

        def begin_RPCGetStationProperty(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.begin(self, ((), _response, _ex, _sent, context))

        def end_RPCGetStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetStationProperty.end(self, _r)

        def RPCSetStationProperty(self, StationProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.invoke(self, ((StationProperty, ), context))

        def RPCSetStationPropertyAsync(self, StationProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.invokeAsync(self, ((StationProperty, ), context))

        def begin_RPCSetStationProperty(self, StationProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.begin(self, ((StationProperty, ), _response, _ex, _sent, context))

        def end_RPCSetStationProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetStationProperty.end(self, _r)

        def RPCDelSOEProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelSOEProperty.invoke(self, ((station, pIDs), context))

        def RPCDelSOEPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelSOEProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelSOEProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelSOEProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelSOEProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelSOEProperty.end(self, _r)

        def RPCGetSOEProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSOEProperty.invoke(self, ((station, ), context))

        def RPCGetSOEPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSOEProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetSOEProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetSOEProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetSOEProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetSOEProperty.end(self, _r)

        def RPCSetSOEProperty(self, station, SOEProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSOEProperty.invoke(self, ((station, SOEProperty), context))

        def RPCSetSOEPropertyAsync(self, station, SOEProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSOEProperty.invokeAsync(self, ((station, SOEProperty), context))

        def begin_RPCSetSOEProperty(self, station, SOEProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetSOEProperty.begin(self, ((station, SOEProperty), _response, _ex, _sent, context))

        def end_RPCSetSOEProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetSOEProperty.end(self, _r)

        def RPCDelYKProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYKProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYKPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYKProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYKProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYKProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYKProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYKProperty.end(self, _r)

        def RPCGetYKProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYKProperty.invoke(self, ((station, ), context))

        def RPCGetYKPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYKProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYKProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYKProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYKProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYKProperty.end(self, _r)

        def RPCSetYKProperty(self, station, YKProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYKProperty.invoke(self, ((station, YKProperty), context))

        def RPCSetYKPropertyAsync(self, station, YKProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYKProperty.invokeAsync(self, ((station, YKProperty), context))

        def begin_RPCSetYKProperty(self, station, YKProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYKProperty.begin(self, ((station, YKProperty), _response, _ex, _sent, context))

        def end_RPCSetYKProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYKProperty.end(self, _r)

        def RPCDelYTProperty(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYTProperty.invoke(self, ((station, pIDs), context))

        def RPCDelYTPropertyAsync(self, station, pIDs, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYTProperty.invokeAsync(self, ((station, pIDs), context))

        def begin_RPCDelYTProperty(self, station, pIDs, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCDelYTProperty.begin(self, ((station, pIDs), _response, _ex, _sent, context))

        def end_RPCDelYTProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCDelYTProperty.end(self, _r)

        def RPCGetYTProperty(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYTProperty.invoke(self, ((station, ), context))

        def RPCGetYTPropertyAsync(self, station, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYTProperty.invokeAsync(self, ((station, ), context))

        def begin_RPCGetYTProperty(self, station, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetYTProperty.begin(self, ((station, ), _response, _ex, _sent, context))

        def end_RPCGetYTProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetYTProperty.end(self, _r)

        def RPCSetYTProperty(self, station, YTProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYTProperty.invoke(self, ((station, YTProperty), context))

        def RPCSetYTPropertyAsync(self, station, YTProperty, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYTProperty.invokeAsync(self, ((station, YTProperty), context))

        def begin_RPCSetYTProperty(self, station, YTProperty, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCSetYTProperty.begin(self, ((station, YTProperty), _response, _ex, _sent, context))

        def end_RPCSetYTProperty(self, _r):
            return _M_CommandArea.DataCommand._op_RPCSetYTProperty.end(self, _r)

        def RPCGetPropertyTable(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.invoke(self, ((), context))

        def RPCGetPropertyTableAsync(self, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.invokeAsync(self, ((), context))

        def begin_RPCGetPropertyTable(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.begin(self, ((), _response, _ex, _sent, context))

        def end_RPCGetPropertyTable(self, _r):
            return _M_CommandArea.DataCommand._op_RPCGetPropertyTable.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_CommandArea.DataCommandPrx.ice_checkedCast(proxy, '::CommandArea::DataCommand', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_CommandArea.DataCommandPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::CommandArea::DataCommand'
    _M_CommandArea._t_DataCommandPrx = IcePy.defineProxy('::CommandArea::DataCommand', DataCommandPrx)

    _M_CommandArea.DataCommandPrx = DataCommandPrx
    del DataCommandPrx

    _M_CommandArea.DataCommand = Ice.createTempClass()
    class DataCommand(Ice.Object):

        def ice_ids(self, current=None):
            return ('::CommandArea::DataCommand', '::Ice::Object')

        def ice_id(self, current=None):
            return '::CommandArea::DataCommand'

        @staticmethod
        def ice_staticId():
            return '::CommandArea::DataCommand'

        def RPCDelYCProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYCProperty' not implemented")

        def RPCGetYCProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYCProperty' not implemented")

        def RPCSetYCProperty(self, station, YCProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYCProperty' not implemented")

        def RPCGetRealtimeYCData(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYCData' not implemented")

        def RPCGetRealtimeYCDataForHTML(self, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYCDataForHTML' not implemented")

        def RPCGetDayYCDatas(self, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYCDatas' not implemented")

        def RPCGetPeriodYCDatas(self, datetime0, datetime1, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetPeriodYCDatas' not implemented")

        def RPCGetTimePointYCData(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetTimePointYCData' not implemented")

        def RPCSetRealtimeYCData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSetRealtimeYCData' not implemented")

        def RPCSaveYCData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSaveYCData' not implemented")

        def RPCDelYXProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYXProperty' not implemented")

        def RPCGetYXProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYXProperty' not implemented")

        def RPCSetYXProperty(self, station, YXProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYXProperty' not implemented")

        def RPCGetRealtimeYXData(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYXData' not implemented")

        def RPCGetRealtimeYXDataForHTML(self, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetRealtimeYXDataForHTML' not implemented")

        def RPCGetDayYXData(self, station, datetime, pID, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYXData' not implemented")

        def RPCGetDayYXDatas(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetDayYXDatas' not implemented")

        def RPCGetPeriodYXData(self, station, datetime0, datetime1, pID, current=None):
            raise NotImplementedError("servant method 'RPCGetPeriodYXData' not implemented")

        def RPCGetTimePointYXData(self, station, datetime, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCGetTimePointYXData' not implemented")

        def RPCSetRealtimeYXData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSetRealtimeYXData' not implemented")

        def RPCSaveYXData(self, station, pIDs, data, current=None):
            raise NotImplementedError("servant method 'RPCSaveYXData' not implemented")

        def RPCDelStationProperty(self, stations, current=None):
            raise NotImplementedError("servant method 'RPCDelStationProperty' not implemented")

        def RPCGetStationProperty(self, current=None):
            raise NotImplementedError("servant method 'RPCGetStationProperty' not implemented")

        def RPCSetStationProperty(self, StationProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetStationProperty' not implemented")

        def RPCDelSOEProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelSOEProperty' not implemented")

        def RPCGetSOEProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetSOEProperty' not implemented")

        def RPCSetSOEProperty(self, station, SOEProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetSOEProperty' not implemented")

        def RPCDelYKProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYKProperty' not implemented")

        def RPCGetYKProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYKProperty' not implemented")

        def RPCSetYKProperty(self, station, YKProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYKProperty' not implemented")

        def RPCDelYTProperty(self, station, pIDs, current=None):
            raise NotImplementedError("servant method 'RPCDelYTProperty' not implemented")

        def RPCGetYTProperty(self, station, current=None):
            raise NotImplementedError("servant method 'RPCGetYTProperty' not implemented")

        def RPCSetYTProperty(self, station, YTProperty, current=None):
            raise NotImplementedError("servant method 'RPCSetYTProperty' not implemented")

        def RPCGetPropertyTable(self, current=None):
            raise NotImplementedError("servant method 'RPCGetPropertyTable' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_CommandArea._t_DataCommandDisp)

        __repr__ = __str__

    _M_CommandArea._t_DataCommandDisp = IcePy.defineClass('::CommandArea::DataCommand', DataCommand, (), None, ())
    DataCommand._ice_type = _M_CommandArea._t_DataCommandDisp

    DataCommand._op_RPCDelYCProperty = IcePy.Operation('RPCDelYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYCProperty = IcePy.Operation('RPCGetYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_YCArea._t_DxPropertyYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYCProperty = IcePy.Operation('RPCSetYCProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_YCArea._t_DxPropertyYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYCData = IcePy.Operation('RPCGetRealtimeYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYCDataForHTML = IcePy.Operation('RPCGetRealtimeYCDataForHTML', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_StringSeq, False, 0),), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYCDatas = IcePy.Operation('RPCGetDayYCDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPeriodYCDatas = IcePy.Operation('RPCGetPeriodYCDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetTimePointYCData = IcePy.Operation('RPCGetTimePointYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YCArea._t_DxDTYCSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetRealtimeYCData = IcePy.Operation('RPCSetRealtimeYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSaveYCData = IcePy.Operation('RPCSaveYCData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YCArea._t_DxDTYCSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelYXProperty = IcePy.Operation('RPCDelYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYXProperty = IcePy.Operation('RPCGetYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_YXArea._t_DxPropertyYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYXProperty = IcePy.Operation('RPCSetYXProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_YXArea._t_DxPropertyYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYXData = IcePy.Operation('RPCGetRealtimeYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetRealtimeYXDataForHTML = IcePy.Operation('RPCGetRealtimeYXDataForHTML', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_StringSeq, False, 0),), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYXData = IcePy.Operation('RPCGetDayYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetDayYXDatas = IcePy.Operation('RPCGetDayYXDatas', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPeriodYXData = IcePy.Operation('RPCGetPeriodYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetTimePointYXData = IcePy.Operation('RPCGetTimePointYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (((), _M_YXArea._t_DxDTYXSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetRealtimeYXData = IcePy.Operation('RPCSetRealtimeYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSaveYXData = IcePy.Operation('RPCSaveYXData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0), ((), _M_YXArea._t_DxDTYXSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelStationProperty = IcePy.Operation('RPCDelStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_DemoArea._t_LongSeq, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetStationProperty = IcePy.Operation('RPCGetStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_StationArea._t_DxPropertyStationSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetStationProperty = IcePy.Operation('RPCSetStationProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_StationArea._t_DxPropertyStationSeq, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelSOEProperty = IcePy.Operation('RPCDelSOEProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetSOEProperty = IcePy.Operation('RPCGetSOEProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_SOEArea._t_DxPropertySOESeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetSOEProperty = IcePy.Operation('RPCSetSOEProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_SOEArea._t_DxPropertySOESeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelYKProperty = IcePy.Operation('RPCDelYKProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYKProperty = IcePy.Operation('RPCGetYKProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_YKArea._t_DxPropertyYKSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYKProperty = IcePy.Operation('RPCSetYKProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_YKArea._t_DxPropertyYKSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCDelYTProperty = IcePy.Operation('RPCDelYTProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_DemoArea._t_LongSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetYTProperty = IcePy.Operation('RPCGetYTProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (((), _M_YTArea._t_DxPropertyYTSeq, False, 0),), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCSetYTProperty = IcePy.Operation('RPCSetYTProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_YTArea._t_DxPropertyYTSeq, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    DataCommand._op_RPCGetPropertyTable = IcePy.Operation('RPCGetPropertyTable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0), ((), _M_DemoArea._t_StringSeq, False, 0)), ((), IcePy._t_int, False, 0), ())

    _M_CommandArea.DataCommand = DataCommand
    del DataCommand

# End of module CommandArea
